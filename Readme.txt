Описание на решението и използваните технологии:

Проекта използва minimal api в който е добавен hosted service (PeriodicHostedService).
Данните се извличат от рест сървър и се записват в SQL база данни.
Използва се теймер (PeriodicTimer) за периодично обновяване на данните.
В таблица в базата се Пази името на щата и броя на населението като пре интервал броя се обновява за всеки щат.
Данните от таблицата се показват от Get endpoint в minimal api-то.
Върху колоната с името на щата има дефиниран индекс.
Използвал съм EF Core за абстрация на достъпа до базата но може да бъде използван и Dapper или друг ORM.
Решението има 2ве assemblies. Едното е с domain обекти и едно в което има имплементирана работата с базата и комуникацията с външния сервиз.
За целта са направени 2wa сервиза. 
Според малкия обем на работа с базата не беше нужно имплементация на repository или повече нива на абстракция.

Основния проект minimal api има добавени:

- Global exception handling
- Healthcheck
- Logging(serilog)
- Resiliency (Polly)
- Documentation(swagger)
- Versioning
- Telemetry support,
- Caching (memory cache)
- Docker и docker-compose файлове

Стартирането на проекта е по два начина.

Вариант 1
Стартиране на следната команда от команден ред, която да създаде db контейнер:

docker run -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=Password_123#" -p 1433:1433 --name sql_server_container -d mcr.microsoft.com/mssql/server
от директорията DemographicService.API се стартира dotnet run

след изпълнението на командата проекта е достъпен на адрес: http://localhost:5252/swagger

 Вариант 2
 В основната директория се стартира docker-compose up -db
 това трябва да съзадае контейнер с база и контейнер с geo.api
 Трябва да се провери, контейнера с api е стартиран и работи т.к поради заисимостта си от контейнеар с базата е възможно да се опита да тръгне и да спре,
 което налага допълнително да се стартира.
 При работещ контейнер достъпа е на адрес http://localhost:5005/swagger

 При заявка в swagger отнема амлко време докато започне да показва резълтати. 
 Това се дължи на времето необходимо сервиза да извлече данни който да запише и в последствие да обновява периодично.
